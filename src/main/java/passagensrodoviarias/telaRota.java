/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package passagensrodoviarias;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gabrielpaiva
 */
public class telaRota extends javax.swing.JFrame {

    private static final String URL = "jdbc:mysql://localhost:3306/passagens";
    private static final String USER = "root";
    private static final String PASSWORD = "password";
    
    public telaRota() {
        initComponents();
        preencherComboBox(selectOrigem);
        preencherComboBox(selectDestino);
        preencherComboBoxOnibus(selectOnibus);
        carregarDadosTabela();
        
        
        setTitle("CADASTRAR ROTAS");
        setSize(1280, 860);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    public void atualizarTabelaRotas() {
        DefaultTableModel model = (DefaultTableModel) tableRotas.getModel();
        model.setRowCount(0);

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String sql = "SELECT destino, origem, data_de_partida, horas_da_partida, onibus, preco FROM viagens";
            try (PreparedStatement pstmt = conn.prepareStatement(sql);
                 ResultSet rs = pstmt.executeQuery()) {
                
                while (rs.next()) {
                    model.addRow(new Object[]{rs.getString("destino"), rs.getString("origem"),
                            rs.getString("data_de_partida"), rs.getString("horas_da_partida"), rs.getString("onibus"),
                    rs.getDouble("preco")});
                }
            }
        } catch (SQLException ex) {
            System.out.println("Erro ao atualizar tabela de rotas: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel = new javax.swing.JPanel();
        tituloEmpresa = new javax.swing.JLabel();
        tituloTela = new javax.swing.JLabel();
        origem = new javax.swing.JLabel();
        selectOrigem = new javax.swing.JComboBox<>();
        destino = new javax.swing.JLabel();
        selectDestino = new javax.swing.JComboBox<>();
        onibus = new javax.swing.JLabel();
        selectOnibus = new javax.swing.JComboBox<>();
        data = new javax.swing.JLabel();
        campoData = new javax.swing.JTextField();
        horas = new javax.swing.JLabel();
        campoHoras = new javax.swing.JTextField();
        valor = new javax.swing.JLabel();
        campoValor = new javax.swing.JTextField();
        btCadastrar = new javax.swing.JButton();
        btAtualizar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btVoltar = new javax.swing.JButton();
        resultadoConsultas = new javax.swing.JScrollPane();
        tableRotas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        painel.setBackground(new java.awt.Color(51, 0, 204));
        painel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tituloEmpresa.setFont(new java.awt.Font("Liberation Sans", 1, 64)); // NOI18N
        tituloEmpresa.setForeground(new java.awt.Color(255, 255, 255));
        tituloEmpresa.setText("CROSSBUS");
        painel.add(tituloEmpresa, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, -1));

        tituloTela.setFont(new java.awt.Font("Segoe UI Black", 0, 64)); // NOI18N
        tituloTela.setForeground(new java.awt.Color(255, 255, 255));
        tituloTela.setText("ROTAS");
        painel.add(tituloTela, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 30, 220, -1));

        origem.setBackground(new java.awt.Color(255, 255, 255));
        origem.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        origem.setForeground(new java.awt.Color(255, 255, 255));
        origem.setText("Origem");
        painel.add(origem, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, -1, -1));

        selectOrigem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectOrigemActionPerformed(evt);
            }
        });
        painel.add(selectOrigem, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, 120, -1));

        destino.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        destino.setForeground(new java.awt.Color(255, 255, 255));
        destino.setText("Destino");
        painel.add(destino, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 210, -1, -1));

        selectDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDestinoActionPerformed(evt);
            }
        });
        painel.add(selectDestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 250, 120, -1));

        onibus.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        onibus.setForeground(new java.awt.Color(255, 255, 255));
        onibus.setText("Ônibus");
        painel.add(onibus, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 210, -1, -1));

        selectOnibus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        painel.add(selectOnibus, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 250, 110, -1));

        data.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        data.setForeground(new java.awt.Color(255, 255, 255));
        data.setText("Data");
        painel.add(data, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, -1, -1));
        painel.add(campoData, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 250, 90, -1));

        horas.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        horas.setForeground(new java.awt.Color(255, 255, 255));
        horas.setText("Horas");
        painel.add(horas, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 210, -1, -1));
        painel.add(campoHoras, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 250, 70, -1));

        valor.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        valor.setForeground(new java.awt.Color(255, 255, 255));
        valor.setText("Valor");
        painel.add(valor, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 210, -1, -1));
        painel.add(campoValor, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 250, 70, -1));

        btCadastrar.setText("Cadastrar");
        btCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadastrarActionPerformed(evt);
            }
        });
        painel.add(btCadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 250, 100, 30));

        btAtualizar.setText("Atualizar");
        btAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarActionPerformed(evt);
            }
        });
        painel.add(btAtualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 410, 110, 40));

        btExcluir.setText("Excluir Rota");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });
        painel.add(btExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 530, 110, 40));

        btVoltar.setText("Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });
        painel.add(btVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 750, 110, 40));

        tableRotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origem", "Destino", "Data de partida", "Horas de partida", "Ônibus", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableRotas.setColumnSelectionAllowed(true);
        tableRotas.getTableHeader().setReorderingAllowed(false);
        resultadoConsultas.setViewportView(tableRotas);
        tableRotas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        painel.add(resultadoConsultas, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 310, 780, 480));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, 1324, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDestinoActionPerformed

    }//GEN-LAST:event_selectDestinoActionPerformed

    private void selectOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectOrigemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectOrigemActionPerformed

    private void btCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadastrarActionPerformed
        String origem = selectOrigem.getSelectedItem().toString();
        String destino = selectDestino.getSelectedItem().toString();
        String onibus = selectOnibus.getSelectedItem().toString();
        String data = campoData.getText();
        String horas = campoHoras.getText();
        String valor = campoValor.getText();

        if (origem.equals("SELECIONE") || destino.equals("SELECIONE") || data.isEmpty() || horas.isEmpty() || valor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos para cadastrar a rota.");
            return;
        }

        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = DriverManager.getConnection(URL, USER, PASSWORD);

            String sql = "INSERT INTO viagens (origem, destino, onibus, data_de_partida, horas_da_partida, preco) VALUES (?, ?, ?, ?, ?, ?)";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, origem);
            stmt.setString(2, destino);
            stmt.setString(3, onibus);
            stmt.setString(4, data);
            stmt.setString(5, horas);
            stmt.setDouble(6, Double.parseDouble(valor));
            
            stmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Rota cadastrada com sucesso.");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar a rota: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        limparCampos();
        
    }//GEN-LAST:event_btCadastrarActionPerformed

    private void btAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarActionPerformed
        atualizarTabelaRotas();
    }//GEN-LAST:event_btAtualizarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        // Obtém a linha selecionada na tabela
        int selectedRow = tableRotas.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione uma rota para excluir.");
            return;
        }

        // Obtém os valores da linha selecionada para identificar a rota
        String origem = tableRotas.getValueAt(selectedRow, 0).toString();
        String destino = tableRotas.getValueAt(selectedRow, 1).toString();
        String dataPartida = tableRotas.getValueAt(selectedRow, 2).toString();
        String horasPartida = tableRotas.getValueAt(selectedRow, 3).toString();
        String onibus = tableRotas.getValueAt(selectedRow, 4).toString();

        int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir esta rota?", "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
                // Query para excluir a rota
                String sql = "DELETE FROM viagens WHERE origem = ? AND destino = ? AND data_de_partida = ? AND horas_da_partida = ? AND onibus = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setString(1, origem);
                    pstmt.setString(2, destino);
                    pstmt.setString(3, dataPartida);
                    pstmt.setString(4, horasPartida);
                    pstmt.setString(5, onibus);
                    pstmt.executeUpdate();
                }

                // Remove a linha da tabela
                DefaultTableModel model = (DefaultTableModel) tableRotas.getModel();
                model.removeRow(selectedRow);

                JOptionPane.showMessageDialog(this, "Rota excluída com sucesso.");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao excluir a rota: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btVoltarActionPerformed
    private void carregarDadosTabela() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String sql = "SELECT origem, destino, data_de_partida, horas_da_partida, onibus, preco FROM viagens";

            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {

                try (ResultSet rs = pstmt.executeQuery()) {
                    DefaultTableModel model = (DefaultTableModel) tableRotas.getModel();
                    model.setRowCount(0);
                    while (rs.next()) {
                        Object[] rowData = {
                            rs.getString("origem"),
                            rs.getString("destino"),
                            rs.getString("data_de_partida"),
                            rs.getString("horas_da_partida"),
                            rs.getString("onibus"),
                            rs.getDouble("preco")
                        };
                        model.addRow(rowData);
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados da tabela: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void limparCampos() {
        selectOrigem.setSelectedIndex(0);
        selectDestino.setSelectedIndex(0);
        campoData.setText("");
        campoHoras.setText("");
        campoValor.setText("");
    }

    /**
     * @param args the command line arguments
     */
    private void preencherComboBoxes() {
        preencherComboBox(selectOrigem);
        preencherComboBox(selectDestino);
    }
    
    private void preencherComboBox(JComboBox<String> comboBox) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            String url = "jdbc:mysql://localhost:3306/passagens";
            String user = "root";
            String password = "password";

            conn = DriverManager.getConnection(url, user, password);

            String sql = "SELECT nome_cidade, uf FROM cidades";
            stmt = conn.prepareStatement(sql);

            rs = stmt.executeQuery();

            comboBox.removeAllItems();
            comboBox.addItem("SELECIONE");

            while (rs.next()) {
                String cidade = rs.getString("nome_cidade");
                String uf = rs.getString("uf");
                String cidadeUf = cidade + "-" + uf;
                comboBox.addItem(cidadeUf);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao preencher ComboBox: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    private void preencherComboBoxOnibus(JComboBox<String> comboBox) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            String url = "jdbc:mysql://localhost:3306/passagens";
            String user = "root";
            String password = "password";

            conn = DriverManager.getConnection(url, user, password);

            String sql = "SELECT numero FROM veiculos";
            stmt = conn.prepareStatement(sql);

            rs = stmt.executeQuery();

            comboBox.removeAllItems();
            comboBox.addItem("SELECIONE");

            while (rs.next()) {
                String numeroOnibus = rs.getString("numero");
                comboBox.addItem(numeroOnibus);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao preencher ComboBox de Ônibus: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(telaRota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaRota().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtualizar;
    private javax.swing.JButton btCadastrar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btVoltar;
    private javax.swing.JTextField campoData;
    private javax.swing.JTextField campoHoras;
    private javax.swing.JTextField campoValor;
    private javax.swing.JLabel data;
    private javax.swing.JLabel destino;
    private javax.swing.JLabel horas;
    private javax.swing.JLabel onibus;
    private javax.swing.JLabel origem;
    private javax.swing.JPanel painel;
    private javax.swing.JScrollPane resultadoConsultas;
    private javax.swing.JComboBox<String> selectDestino;
    private javax.swing.JComboBox<String> selectOnibus;
    private javax.swing.JComboBox<String> selectOrigem;
    private javax.swing.JTable tableRotas;
    private javax.swing.JLabel tituloEmpresa;
    private javax.swing.JLabel tituloTela;
    private javax.swing.JLabel valor;
    // End of variables declaration//GEN-END:variables
}
